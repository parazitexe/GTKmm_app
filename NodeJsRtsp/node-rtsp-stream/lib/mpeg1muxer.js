// Generated by CoffeeScript 1.8.0
(function() {
    var Mpeg1Muxer, child_process, events, util;

    child_process = require('child_process');

    util = require('util');

    events = require('events');

    Mpeg1Muxer = function(options) {
        var self;
        self = this;
        this.url = options.url;
        this.stream = child_process.spawn("ffmpeg", ["-rtsp_transport", "tcp", "-i", this.url, '-f', 'mpeg1video', '-b:v', '800k', '-r', '30', '-'], {
            detached: false
        });
        this.inputStreamStarted = true;
        this.isOnline = false;
        this.checkTimeout = 2000;
        this.lasttDatatime = +new Date();
        this.stream.stdout.on('data', function(data) {
            self.lasttDatatime = +new Date();
            return self.emit('mpeg1data', data);
        });
        this.stream.stderr.on('data', function(data) {
            self.lasttDatatime = +new Date();
            return self.emit('ffmpegError', data);
        });

        this.checkOnline();
        return this;
    };


    Mpeg1Muxer.prototype.start = function(){

    };

    let ws = require('ws');
    Mpeg1Muxer.prototype.checkOnline = function(){
        let self;
        self = this;
        let checkIntervar = setInterval( _ => {
            let IDLE = +new Date() - self.lasttDatatime;
            console.log("IDLE - ", IDLE);
            (IDLE>self.checkTimeout) ? self.isOnline = false : self.isOnline = true;
            console.log("isOnline - ", self.isOnline)
        }, self.checkTimeout )
    };

    Mpeg1Muxer.prototype.restart = function(){
        var self;
        self = this;
        console.log("Mpeg1Muxer restarting stream with pid " , self.stream.pid);
        self.stream.kill();
        self.stream = child_process.spawn("ffmpeg", ["-rtsp_transport", "tcp", "-i", self.url, '-f', 'mpeg1video', '-b:v', '800k', '-r', '30', '-'], {
            detached: false
        });
        console.log("restart sstream and create mpeg1Muxer with pid - ", self.stream.pid);
        this.stream.stdout.on('data', function(data) {
            self.lasttDatatime = +new Date();
            return self.emit('mpeg1data', data);
        });
        this.stream.stderr.on('data', function(data) {
            self.lasttDatatime = +new Date();
            return self.emit('ffmpegError', data);
        });
        return self;
    };

    util.inherits(Mpeg1Muxer, events.EventEmitter);

    module.exports = Mpeg1Muxer;

}).call(this);
